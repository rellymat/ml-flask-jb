# -*- coding: utf-8 -*-
"""diamonds_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yV7hZS25gjqbCimRnZ4NuOBDiU0vUESd
"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from pandas.api.types import CategoricalDtype
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

df = {}

def init():
    global df
    df = pd.read_csv('data/diamonds.csv',index_col=0)

def prepare_data(ls):
    global df
    df = df[(df[['x','y','z']] != 0).all(axis=1)]
    df.loc[df.index.size + 1] = ls
    df = pd.get_dummies(df, columns=['color'])
    df['cut'] = df['cut'].astype('category')
    cd = CategoricalDtype(categories=['Fair', 'Good', 'Very Good', 'Premium', 'Ideal'], ordered=True)
    df['cut']  = df['cut'].astype(cd)
    df['cut_codes'] = df['cut'].cat.codes
    df['volume'] = df['x']*df['y']*df['z']
    df.drop(['x','y','z'], axis=1, inplace=True)
    df['clarity'] = preprocessing.LabelEncoder().fit_transform(df['clarity'])
    df.drop(['cut'], axis=1, inplace=True)
    line = df.loc[df.index.size + 1]
    del line['price']
    df.drop(df.index.size + 1, inplace=True)
    return line

def prepare_data_for_predict(ls):
    return prepare_data(ls)

def predict(ls):
    line_predict = prepare_data_for_predict(ls)
    global df
    X = df.drop(['price'], axis=1)
    y = df['price']
    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=66)
    sc = StandardScaler()
    X_train = sc.fit_transform(X_train)
    clf_rf = RandomForestRegressor()
    clf_rf.fit(X_train , y_train)
    return clf_rf.predict([line_predict])

init()